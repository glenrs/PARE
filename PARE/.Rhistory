# Chunk 1
library(PARE)
#setwd("~/Dropbox/Publications/ROC_Alternative")
setwd("~/Dropbox/PARE")
dir.create("Figures", showWarnings = FALSE)
defaultWidth <- 8
defaultHeight <- 4.5
narrowWidth <- 4
saveFigure <- function(description1, description2, width=defaultWidth, height=defaultHeight)
{
ggsave(paste("Figures/", gsub(" ", "_", description1), "__", description2, ".png", sep=""), width=width, height=height, units="in")
}
# Chunk 2
generateNumericScores = function(means, randomSeed=999, n=numRandomValues)
{
if (length(means) < 1)
stop("Must provide at least one mean.")
set.seed(randomSeed)
scores = NULL
for (i in 1:length(means))
scores = c(scores, rnorm(n / length(means), mean=means[i]))
return(standardize(scores))
}
generateNumericScoresImbalanced = function(means, randomSeed=0, n=numRandomValues)
{
if (length(means) != 2)
stop("Must provide exactly two means.")
set.seed(randomSeed)
scores = rnorm(n * imbalanceProportion, mean=means[1])
scores = c(scores, rnorm(n * (1 - imbalanceProportion), mean=means[2]))
return(standardize(scores))
}
standardize = function(x)
{
(x - min(x)) / (max(x) - min(x))
}
numRandomValues = 1000
imbalanceProportion = 0.95
actual = factor(c(rep(0, numRandomValues / 2), rep(1, numRandomValues / 2)))
actualImbalanced = factor(c(rep(0, numRandomValues * imbalanceProportion), rep(1, numRandomValues * (1 - imbalanceProportion))))
randomScores = generateNumericScores(0)
mediumSignalScores = generateNumericScores(c(0, 1))
signalScores = generateNumericScores(c(0, 10))
oppositeScores = generateNumericScores(c(10, 0))
sineScores = generateNumericScores(c(-10, 3, -3, 10))
aFewGoodScores = standardize(c(rnorm(990), rnorm(10, mean=10)))
signalBinaryScores = as.integer(as.logical(as.numeric(as.vector(actual))))
oppositeBinaryScores = as.integer(!as.logical(as.numeric(as.vector(actual))))
singleValueScores = rep(as.integer(levels(actual)[2]), length(actual))
mediumSignalScoresImbalanced = generateNumericScoresImbalanced(c(0, 1))
signalScoresImbalanced = generateNumericScoresImbalanced(c(0, 10))
oppositeScoresImbalanced = generateNumericScoresImbalanced(c(10, 0))
signalBinaryScoresImbalanced = as.integer(as.logical(as.numeric(as.vector(actualImbalanced))))
oppositeBinaryScoresImbalanced = as.integer(!as.logical(as.numeric(as.vector(actualImbalanced))))
# Chunk 3
plotBarPlot <- function(values, main, width=defaultWidth)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_bar() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Barplot", width=width)
}
plotHist <- function(values, main, width=defaultWidth)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_histogram() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Histogram", width=width)
}
plotBoxPlot <- function(scores, actual, main, width=defaultWidth)
{
plotData <- data.frame(Scores=scores, Actual=actual)
print(ggplot(plotData, aes(factor(Actual), Scores)) + geom_boxplot() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "BoxPlot", width=width)
}
plotBarPlot(actual, main="Class Labels")
plotBarPlot(actualImbalanced, main="Class Labels")
plotHist(randomScores, main="Random Scores")
plotHist(mediumSignalScores, main="Medium Signal Scores")
plotHist(signalScores, main="Signal Scores")
plotHist(oppositeScores, main="Opposite Scores")
plotHist(sineScores, main="Sine Scores")
plotHist(signalBinaryScores, main="Signal Binary Scores")
plotHist(oppositeBinaryScores, main="Opposite Binary Scores")
plotHist(aFewGoodScores, main="A Few Good Scores")
plotBoxPlot(randomScores, actual, main="Random Scores")
plotBoxPlot(mediumSignalScores, actual, main="Medium Signal Scores")
plotBoxPlot(signalScores, actual, main="Signal Scores")
plotBoxPlot(oppositeScores, actual, main="Opposite Scores")
plotBoxPlot(sineScores, actual, main="Sine Scores")
plotBoxPlot(signalBinaryScores, actual, main="Signal Binary Scores")
plotBoxPlot(oppositeBinaryScores, actual, main="Opposite Binary Scores")
plotBoxPlot(aFewGoodScores, actual, main="A Few Good Scores", width=narrowWidth)
# Chunk 4
plotHist(mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
plotHist(signalScoresImbalanced, main="Signal Scores Imbalanced")
plotHist(oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
plotHist(signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced")
plotHist(oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
plotBoxPlot(mediumSignalScoresImbalanced, actualImbalanced, main="Medium Signal Scores Imbalanced")
plotBoxPlot(signalScoresImbalanced, actualImbalanced, main="Signal Scores Imbalanced")
plotBoxPlot(oppositeScoresImbalanced, actualImbalanced, main="Opposite Scores Imbalanced")
plotBoxPlot(signalBinaryScoresImbalanced, actualImbalanced, main="Signal Binary Scores Imbalanced")
plotBoxPlot(oppositeBinaryScoresImbalanced, actualImbalanced, main="Opposite Binary Scores Imbalanced")
# Chunk 5
plotROC = function(actual, scores, main, width=defaultWidth)
{
rocResult = roc(scores, actual)
aucValue = auc(rocResult)
main2 = paste(main, "\n", "(AUC = ", format(aucValue, digits=3, nsmall=3), ")", sep="")
plotData <- data.frame(TPR=rocResult$tpr, FPR=rocResult$fpr)
print(ggplot(plotData, aes(x=FPR, y=TPR)) + geom_abline(color="darkgrey", linetype="dashed") + geom_line() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("False positive rate") + ylab("True positive rate") + ggtitle(main2))
saveFigure(main, "ROC", width=width)
}
plotROC(actual, randomScores, "Random Scores")
plotROC(actual, mediumSignalScores, main="Medium Signal Scores")
plotROC(actual, signalScores, main="Signal Scores")
plotROC(actual, oppositeScores, main="Opposite Scores")
plotROC(actual, sineScores, main="Sine Scores")
plotROC(actual, aFewGoodScores, main="A Few Good Scores", width=narrowWidth)
plotROC(actual, signalBinaryScores, main="Signal Binary Scores")
plotROC(actual, singleValueScores, main="Single Value Scores")
plotROC(actual, oppositeBinaryScores, main="Opposite Binary Scores")
plotROC(actualImbalanced, randomScores, main="Random Scores Imbalanced")
plotROC(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
plotROC(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced")
plotROC(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
plotROC(actualImbalanced, signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced")
plotROC(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
# Chunk 6
metricCalculationFunction <- calculateAccuracy
metricLabel <- "Accuracy"
#metricCalculationFunction <- calculateSensitivity
#metricLabel <- "Sensitivity"
#metricCalculationFunction <- calculateSpecificity
#metricLabel <- "Specificity"
#metricCalculationFunction <- calculatePPV
#metricLabel <- "PPV"
#metricCalculationFunction <- calculateNPV
#metricLabel <- "NPV"
#metricCalculationFunction <- calculateFscore
#metricLabel <- "F-score"
pare(actual, randomScores, main="Random Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, mediumSignalScores, main="Medium Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, signalScores, main="Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, singleValueScores, main="Single Value Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actualImbalanced, oppositeScoresImbalanced, main="Opposite Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
# Chunk 7
#metricCalculationFunction <- calculateAccuracy
#metricLabel <- "Accuracy"
#width <- defaultWidth
#metricCalculationFunction <- calculateSensitivity
#metricLabel <- "Sensitivity"
#width <- narrowWidth
metricCalculationFunction <- calculateSpecificity
metricLabel <- "Specificity"
width <- narrowWidth
pare(actual, randomScores, main="Random Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, mediumSignalScores, main="Medium Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, signalScores, main="Perfect Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, oppositeScores, main="Opposite Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, sineScores, main="Sine Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, aFewGoodScores, main="A Few Good Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=defaultWidth)
pare(actual, signalBinaryScores, main="Signal Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, oppositeBinaryScores, main="Wrong Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, singleValueScores, main="Single Value Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, randomScores, main="Random Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
metricCalculationFunction <- calculateAccuracy
metricLabel <- "Accuracy"
width <- defaultWidth
#metricCalculationFunction <- calculateSensitivity
#metricLabel <- "Sensitivity"
#width <- narrowWidth
#metricCalculationFunction <- calculateSpecificity
#metricLabel <- "Specificity"
#width <- narrowWidth
pare(actual, randomScores, main="Random Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, mediumSignalScores, main="Medium Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, signalScores, main="Perfect Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, oppositeScores, main="Opposite Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, sineScores, main="Sine Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, aFewGoodScores, main="A Few Good Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=defaultWidth)
pare(actual, signalBinaryScores, main="Signal Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, oppositeBinaryScores, main="Wrong Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, singleValueScores, main="Single Value Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, randomScores, main="Random Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
?knit2html
?knit
getwd()
?knitr
??knit
library("knitr")
library(knit)
# Chunk 1
library(PARE)
#setwd("~/Dropbox/Publications/ROC_Alternative")
setwd("~/Dropbox/PARE")
dir.create("Figures", showWarnings = FALSE)
defaultWidth <- 8
defaultHeight <- 4.5
narrowWidth <- 4
saveFigure <- function(description1, description2, width=defaultWidth, height=defaultHeight)
{
ggsave(paste("Figures/", gsub(" ", "_", description1), "__", description2, ".png", sep=""), width=width, height=height, units="in")
}
# Chunk 2
generateNumericScores = function(means, randomSeed=999, n=numRandomValues)
{
if (length(means) < 1)
stop("Must provide at least one mean.")
set.seed(randomSeed)
scores = NULL
for (i in 1:length(means))
scores = c(scores, rnorm(n / length(means), mean=means[i]))
return(standardize(scores))
}
generateNumericScoresImbalanced = function(means, randomSeed=0, n=numRandomValues)
{
if (length(means) != 2)
stop("Must provide exactly two means.")
set.seed(randomSeed)
scores = rnorm(n * imbalanceProportion, mean=means[1])
scores = c(scores, rnorm(n * (1 - imbalanceProportion), mean=means[2]))
return(standardize(scores))
}
standardize = function(x)
{
(x - min(x)) / (max(x) - min(x))
}
numRandomValues = 1000
imbalanceProportion = 0.95
actual = factor(c(rep(0, numRandomValues / 2), rep(1, numRandomValues / 2)))
actualImbalanced = factor(c(rep(0, numRandomValues * imbalanceProportion), rep(1, numRandomValues * (1 - imbalanceProportion))))
randomScores = generateNumericScores(0)
mediumSignalScores = generateNumericScores(c(0, 1))
signalScores = generateNumericScores(c(0, 10))
oppositeScores = generateNumericScores(c(10, 0))
sineScores = generateNumericScores(c(-10, 3, -3, 10))
aFewGoodScores = standardize(c(rnorm(990), rnorm(10, mean=10)))
signalBinaryScores = as.integer(as.logical(as.numeric(as.vector(actual))))
oppositeBinaryScores = as.integer(!as.logical(as.numeric(as.vector(actual))))
singleValueScores = rep(as.integer(levels(actual)[2]), length(actual))
mediumSignalScoresImbalanced = generateNumericScoresImbalanced(c(0, 1))
signalScoresImbalanced = generateNumericScoresImbalanced(c(0, 10))
oppositeScoresImbalanced = generateNumericScoresImbalanced(c(10, 0))
signalBinaryScoresImbalanced = as.integer(as.logical(as.numeric(as.vector(actualImbalanced))))
oppositeBinaryScoresImbalanced = as.integer(!as.logical(as.numeric(as.vector(actualImbalanced))))
# Chunk 3
plotBarPlot <- function(values, main, width=defaultWidth)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_bar() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Barplot", width=width)
}
plotHist <- function(values, main, width=defaultWidth)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_histogram() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Histogram", width=width)
}
plotBoxPlot <- function(scores, actual, main, width=defaultWidth)
{
plotData <- data.frame(Scores=scores, Actual=actual)
print(ggplot(plotData, aes(factor(Actual), Scores)) + geom_boxplot() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "BoxPlot", width=width)
}
plotBarPlot(actual, main="Class Labels")
plotBarPlot(actualImbalanced, main="Class Labels")
plotHist(randomScores, main="Random Scores")
plotHist(mediumSignalScores, main="Medium Signal Scores")
plotHist(signalScores, main="Signal Scores")
plotHist(oppositeScores, main="Opposite Scores")
plotHist(sineScores, main="Sine Scores")
plotHist(signalBinaryScores, main="Signal Binary Scores")
plotHist(oppositeBinaryScores, main="Opposite Binary Scores")
plotHist(aFewGoodScores, main="A Few Good Scores")
plotBoxPlot(randomScores, actual, main="Random Scores")
plotBoxPlot(mediumSignalScores, actual, main="Medium Signal Scores")
plotBoxPlot(signalScores, actual, main="Signal Scores")
plotBoxPlot(oppositeScores, actual, main="Opposite Scores")
plotBoxPlot(sineScores, actual, main="Sine Scores")
plotBoxPlot(signalBinaryScores, actual, main="Signal Binary Scores")
plotBoxPlot(oppositeBinaryScores, actual, main="Opposite Binary Scores")
plotBoxPlot(aFewGoodScores, actual, main="A Few Good Scores", width=narrowWidth)
# Chunk 4
plotHist(mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
plotHist(signalScoresImbalanced, main="Signal Scores Imbalanced")
plotHist(oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
plotHist(signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced")
plotHist(oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
plotBoxPlot(mediumSignalScoresImbalanced, actualImbalanced, main="Medium Signal Scores Imbalanced")
plotBoxPlot(signalScoresImbalanced, actualImbalanced, main="Signal Scores Imbalanced")
plotBoxPlot(oppositeScoresImbalanced, actualImbalanced, main="Opposite Scores Imbalanced")
plotBoxPlot(signalBinaryScoresImbalanced, actualImbalanced, main="Signal Binary Scores Imbalanced")
plotBoxPlot(oppositeBinaryScoresImbalanced, actualImbalanced, main="Opposite Binary Scores Imbalanced")
# Chunk 5
plotROC = function(actual, scores, main, width=defaultWidth)
{
rocResult = roc(scores, actual)
aucValue = auc(rocResult)
main2 = paste(main, "\n", "(AUC = ", format(aucValue, digits=3, nsmall=3), ")", sep="")
plotData <- data.frame(TPR=rocResult$tpr, FPR=rocResult$fpr)
print(ggplot(plotData, aes(x=FPR, y=TPR)) + geom_abline(color="darkgrey", linetype="dashed") + geom_line() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("False positive rate") + ylab("True positive rate") + ggtitle(main2))
saveFigure(main, "ROC", width=width)
}
plotROC(actual, randomScores, "Random Scores")
plotROC(actual, mediumSignalScores, main="Medium Signal Scores")
plotROC(actual, signalScores, main="Signal Scores")
plotROC(actual, oppositeScores, main="Opposite Scores")
plotROC(actual, sineScores, main="Sine Scores")
plotROC(actual, aFewGoodScores, main="A Few Good Scores", width=narrowWidth)
plotROC(actual, signalBinaryScores, main="Signal Binary Scores")
plotROC(actual, singleValueScores, main="Single Value Scores")
plotROC(actual, oppositeBinaryScores, main="Opposite Binary Scores")
plotROC(actualImbalanced, randomScores, main="Random Scores Imbalanced")
plotROC(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
plotROC(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced")
plotROC(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
plotROC(actualImbalanced, signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced")
plotROC(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
# Chunk 6
metricCalculationFunction <- calculateAccuracy
metricLabel <- "Accuracy"
#metricCalculationFunction <- calculateSensitivity
#metricLabel <- "Sensitivity"
#metricCalculationFunction <- calculateSpecificity
#metricLabel <- "Specificity"
#metricCalculationFunction <- calculatePPV
#metricLabel <- "PPV"
#metricCalculationFunction <- calculateNPV
#metricLabel <- "NPV"
#metricCalculationFunction <- calculateFscore
#metricLabel <- "F-score"
pare(actual, randomScores, main="Random Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, mediumSignalScores, main="Medium Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, signalScores, main="Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actual, singleValueScores, main="Single Value Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
#pare(actualImbalanced, oppositeScoresImbalanced, main="Opposite Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel)
# Chunk 7
metricCalculationFunction <- calculateAccuracy
metricLabel <- "Accuracy"
width <- defaultWidth
#metricCalculationFunction <- calculateSensitivity
#metricLabel <- "Sensitivity"
#width <- narrowWidth
#metricCalculationFunction <- calculateSpecificity
#metricLabel <- "Specificity"
#width <- narrowWidth
pare(actual, randomScores, main="Random Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, mediumSignalScores, main="Medium Signal Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, signalScores, main="Perfect Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actual, oppositeScores, main="Opposite Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, sineScores, main="Sine Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, aFewGoodScores, main="A Few Good Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=defaultWidth)
pare(actual, signalBinaryScores, main="Signal Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, oppositeBinaryScores, main="Wrong Binary Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actual, singleValueScores, main="Single Value Scores", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, randomScores, main="Random Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=narrowWidth)
pare(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, signalBinaryScoresImbalanced, main="Signal Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
pare(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced", metricCalculationFunction=metricCalculationFunction, metricLabel=metricLabel, width=width)
compareAUCvPARE = function(meanOptions, iterations=20)
{
aucScores = NULL
pareScores = NULL
for (i in 1:iterations)
{
message(paste("Iteration ", i, "/", iterations, sep=""))
for (j in 1:length(meanOptions))
{
meanOption = meanOptions[j]
predictors = generateNumericScores(c(0, meanOption), i*j)
aucScores = c(aucScores, auc(roc(predictors, actual)))
pareScore <-pare(actual, predictors, plot=FALSE)
pareScores = c(pareScores, pareScore)
}
}
hist(aucScores, main=paste("AUC:", format(mean(aucScores), digits=3, nsmall=3)))
hist(pareScores, main=paste("PARE:", format(mean(pareScores), digits=3, nsmall=3)))
plotData <- data.frame(AUC=aucScores, PARE=pareScores)
print(ggplot(plotData, aes(x=AUC, y=PARE)) + geom_point() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()))
saveFigure("AUC", "PARE")
}
#compareAUCvPARE(rep(0, 100))
compareAUCvPARE(rnorm(5), iterations=5)
#compareAUCvPARE(rnorm(100), iterations=100)
