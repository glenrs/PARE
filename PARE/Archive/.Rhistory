for(i in 1:length(sortedScores))
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
print((sortedScores[i]+sortedScores)/2)
print(thresholds)
thresholds <- c()
sortedScores = sort(randomScores)
for(i in 1:length(sortedScores))
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
print((sortedScores[i]+sortedScores)/2)
length(thresholds)
thresholds
thresholds = thresholds[1:(length(thresholds)-1)]
length(thresholds)
thresholds <- c()
sortedScores = sort(roundedRandomScores)
for(i in 1:length(sortedScores))
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
print((sortedScores[i]+sortedScores)/2)
thresholds = thresholds[1:(length(thresholds)-1)]
length(thresholds)
print(thresholds)
length(thresholds)
thresholds
?rnorm
fiveLevelScores = c()
for(i in 1:1000)
if(i < 200)
fiveLevelScores <- append(fiveLevelScores, 0)
if(i > 200 & i < 400)
fiveLevelScores <- append(fiveLevelScores, .25)
if(i > 400 & i < 600)
fiveLevelScores <- append(fiveLevelScores, .5)
if(i > 600 & i < 800)
fiveLevelScores <- append(fiveLevelScores, .75)
if(i > 800 & i <= 1000)
fiveLevelScores <- append(fiveLevelScores, 1)
print(fiveLevelScores)
?elif
?else
>elif
fiveLevelScores = c()
for(i in 1:1000)
if(i <= 200)
fiveLevelScores <- append(fiveLevelScores, 0)
if(i > 200 & i <= 400)
fiveLevelScores <- append(fiveLevelScores, .25)
if(i > 400 & i <= 600)
fiveLevelScores <- append(fiveLevelScores, .5)
if(i > 600 & i <= 800)
fiveLevelScores <- append(fiveLevelScores, .75)
if(i > 800 & i <= 1000)
fiveLevelScores <- append(fiveLevelScores, 1)
print(fiveLevelScores)
fiveLevelScores
for(i in 1:1000)
print(i)
if(i <= 200)
fiveLevelScores <- append(fiveLevelScores, 0)
if(i > 200 & i <= 400)
fiveLevelScores <- append(fiveLevelScores, .25)
if(i > 400 & i <= 600)
fiveLevelScores <- append(fiveLevelScores, .5)
if(i > 600 & i <= 800)
fiveLevelScores <- append(fiveLevelScores, .75)
if(i > 800 & i <= 1000)
fiveLevelScores <- append(fiveLevelScores, 1)
fiveLevelScores
length(fiveLevelScores
length(fiveLevelScores)
length(fiveLevelScores)
fiveLevelScores = c()
for(i in 1:1000)
print(i)
if(i <= 200)
fiveLevelScores <- append(fiveLevelScores, 0)
if(i > 200 && i <= 400)
fiveLevelScores <- append(fiveLevelScores, .25)
if(i > 400 && i <= 600)
fiveLevelScores <- append(fiveLevelScores, .5)
if(i > 600 && i <= 800)
fiveLevelScores <- append(fiveLevelScores, .75)
if(i > 800 && i <= 1000)
fiveLevelScores <- append(fiveLevelScores, 1)
length(fiveLevelScores)
fiveLevelScores = c()
for(i in 1:1000)
print(i)
if(i <= 200)
{
fiveLevelScores <- append(fiveLevelScores, 0)
}
if(i > 200 & i <= 400){
fiveLevelScores <- append(fiveLevelScores, .25)
}
if(i > 400 & i <= 600)
{
fiveLevelScores <- append(fiveLevelScores, .5)
}
if(i > 600 & i <= 800)
{}
fiveLevelScores <- append(fiveLevelScores, .75)
}
if(i > 800 & i <= 1000)
{
fiveLevelScores <- append(fiveLevelScores, 1)
}
length(fiveLevelScores)
fiveLevelScores = c()
for(i in 1:1000)
print(i)
if(i <= 200)
{
fiveLevelScores <- append(fiveLevelScores, 0)
}
if(i > 200 & i <= 400){
fiveLevelScores <- append(fiveLevelScores, .25)
}
if(i > 400 & i <= 600)
{
fiveLevelScores <- append(fiveLevelScores, .5)
}
if(i > 600 & i <= 800)
{
fiveLevelScores <- append(fiveLevelScores, .75)
}
if(i > 800 & i <= 1000)
{
fiveLevelScores <- append(fiveLevelScores, 1)
}
length(fiveLevelScores)
?rnorm
x <- rnorm(1000,0,1)
x
y <- rnorm(1000,0,1)
t.test(x,y,"two.sided")
results <-t.test(x,y,"two.sided")
p <- results$p.value
p
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector <- c(myVector,p)
}
length(myVector)
head(myVector)
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
if(p < .05)
{
myVector <- c(myVector,0)
}
if(p >= .05)
{
myVector <- c(myVector,1)
}
}
length(myVector)
head(myVector)
tail(myVector)
?ifelse
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector <- ifelse(p < .05,0,1)
}
head(myVector)
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector <- c(myVector, ifelse(p < .05,0,1))
}
head(myVector)
tail(myVector)
?sum
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector[i] <- ifelse(p < .05,0,1)
}
head(myVector)
tail(myVector)
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector[i] <- ifelse(p < .05,0,1)
}
head(myVector)
tail(myVector)
length(myVector)
sum(myVector)
myVector <- c()
for(i in 1:10000){
x <- rnorm(1000,0,1)
y <- rnorm(1000,0,1)
results <-t.test(x,y,"two.sided")
p <- results$p.value
myVector[i] <- ifelse(p >= .05,0,1)
}
sum(myVector)
generateNumericScores = function(means, randomSeed=999, n=numRandomValues)
{
if (length(means) < 1)
stop("Must provide at least one mean.")
set.seed(randomSeed)
scores = NULL
for (i in 1:length(means))
scores = c(scores, rnorm(n / length(means), mean=means[i]))
return(standardize(scores))
}
randomScores = generateNumericScores(0)
thresholds <- c()
sortedScores = sort(randomScores)
for(i in 1:length(sortedScores))
{
if(sortedScores[i] != sortedScores[i+1])
{
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
}
}
length(thresholds)
fiveLevelScores = c()
for(i in 1:1000)
{
if(i <= 200)
{
print("200")
fiveLevelScores <- append(fiveLevelScores, 0)
}
if(i > 200 & i <= 400){
print("400")
fiveLevelScores <- append(fiveLevelScores, .25)
}
if(i > 400 & i <= 600)
{
print("600")
fiveLevelScores <- append(fiveLevelScores, .5)
}
if(i > 600 & i <= 800)
{
print("800")
fiveLevelScores <- append(fiveLevelScores, .75)
}
if(i > 800 & i <= 1000)
{
print("100")
fiveLevelScores <- append(fiveLevelScores, 1)
}
}
length(fiveLevelScores)
thresholds <- c()
sortedScores = sort(fiveLevelScores)
for(i in 1:length(sortedScores))
{
if(sortedScores[i] != sortedScores[i+1])
{
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
}
}
length(thresholds)
thresholds
### THRESHOLD CALCULATIONS ###
generateNumericScores = function(means, randomSeed=999, n=numRandomValues)
{
if (length(means) < 1)
stop("Must provide at least one mean.")
set.seed(randomSeed)
scores = NULL
for (i in 1:length(means))
scores = c(scores, rnorm(n / length(means), mean=means[i]))
return(standardize(scores))
}
randomScores = generateNumericScores(0)
roundedRandomScores = round(randomScores)
mediumSignalScores = generateNumericScores(c(0, 1))
signalScores = generateNumericScores(c(0, 10))
oppositeScores = generateNumericScores(c(10, 0))
aFewGoodScores = standardize(c(rnorm(990), rnorm(10, mean=10)))
fiveLevelScores = c()
for(i in 1:1000)
{
if(i <= 200)
{
print("200")
fiveLevelScores <- append(fiveLevelScores, 0)
}
if(i > 200 & i <= 400){
print("400")
fiveLevelScores <- append(fiveLevelScores, .25)
}
if(i > 400 & i <= 600)
{
print("600")
fiveLevelScores <- append(fiveLevelScores, .5)
}
if(i > 600 & i <= 800)
{
print("800")
fiveLevelScores <- append(fiveLevelScores, .75)
}
if(i > 800 & i <= 1000)
{
print("100")
fiveLevelScores <- append(fiveLevelScores, 1)
}
}
length(fiveLevelScores)
#FIVE LEVEL SCORES#####
thresholds <- c()
sortedScores = sort(fiveLevelScores)
for(i in 1:length(sortedScores))
{
if(sortedScores[i] != sortedScores[i+1])
{
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
}
}
thresholds
thresholds <- c()
sortedScores = sort(unique(fiveLevelScores))
sortedScores
thresholds <- c()
sortedScores = sort(unique(fiveLevelScores))
for(i in 1:(length(sortedScores)-1))
{
#  if(sortedScores[i] != sortedScores[i+1])
#  {
thresholds <- append(thresholds,(sortedScores[i]+sortedScores[i+1])/2)
#  }
}
length(thresholds)
thresholds
?read.csv
?anova
# Chunk 1
suppressPackageStartupMessages(library(PARE))
#setwd("~/Dropbox/Publications/ROC_Alternative")
setwd("~/Dropbox/PARE/Archive")
dir.create("Figures", showWarnings = FALSE)
saveFigure <- function(description1, description2)
{
ggsave(paste("Figures/", gsub(" ", "_", description1), "__", description2, ".png", sep=""), units="in")
}
# Chunk 2
generateNumericScores = function(means, randomSeed=999, n=numRandomValues)
{
if (length(means) < 1)
stop("Must provide at least one mean.")
set.seed(randomSeed)
scores = NULL
for (i in 1:length(means))
scores = c(scores, rnorm(n / length(means), mean=means[i]))
return(standardize(scores))
}
generateNumericScoresImbalanced = function(means, randomSeed=0, n=numRandomValues)
{
if (length(means) != 2)
stop("Must provide exactly two means.")
set.seed(randomSeed)
scores = rnorm(n * imbalanceProportion, mean=means[1])
scores = c(scores, rnorm(n * (1 - imbalanceProportion), mean=means[2]))
return(standardize(scores))
}
standardize = function(x)
{
(x - min(x)) / (max(x) - min(x))
}
numRandomValues = 1000
imbalanceProportion = 0.95
actual = factor(c(rep(0, numRandomValues / 2), rep(1, numRandomValues / 2)))
actualImbalanced = factor(c(rep(0, numRandomValues * imbalanceProportion), rep(1, numRandomValues * (1 - imbalanceProportion))))
randomScores = generateNumericScores(0)
roundedRandomScores = round(randomScores)
mediumSignalScores = generateNumericScores(c(0, 1))
roundedMediumSignalScores = round(mediumSignalScores)
signalScores = generateNumericScores(c(0, 10))
roundedSignalScores = round(signalScores)
oppositeScores = generateNumericScores(c(10, 0))
aFewGoodScores = standardize(c(rnorm(990), rnorm(10, mean=10)))
###FIVE LEVEL SCORES####
fiveLevelScores = c()
for(i in 1:1000)
{
if(i <= 200)
{
fiveLevelScores <- append(fiveLevelScores, 0)
}
if(i > 200 & i <= 400){
fiveLevelScores <- append(fiveLevelScores, .25)
}
if(i > 400 & i <= 600)
{
fiveLevelScores <- append(fiveLevelScores, .5)
}
if(i > 600 & i <= 800)
{
fiveLevelScores <- append(fiveLevelScores, .75)
}
if(i > 800 & i <= 1000)
{
fiveLevelScores <- append(fiveLevelScores, 1)
}
}
length(fiveLevelScores)
####
strongSignalDiscreteScores = as.integer(as.logical(as.numeric(as.vector(actual))))
oppositeBinaryScores = as.integer(!as.logical(as.numeric(as.vector(actual))))
singleValueScores = rep(as.integer(levels(actual)[2]), length(actual))
mediumSignalScoresImbalanced = generateNumericScoresImbalanced(c(0, 1))
signalScoresImbalanced = generateNumericScoresImbalanced(c(0, 10))
oppositeScoresImbalanced = generateNumericScoresImbalanced(c(10, 0))
strongSignalDiscreteScoresImbalanced = as.integer(as.logical(as.numeric(as.vector(actualImbalanced))))
oppositeBinaryScoresImbalanced = as.integer(!as.logical(as.numeric(as.vector(actualImbalanced))))
# Chunk 3
plotBarPlot <- function(values, main)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_bar() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Barplot")
}
plotHist <- function(values, main)
{
plotData <- data.frame(Scores=values)
print(ggplot(plotData, aes(x=Scores)) + geom_histogram() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "Histogram")
}
plotBoxPlot <- function(scores, actual, main)
{
plotData <- data.frame(Scores=scores, Actual=actual)
print(ggplot(plotData, aes(factor(Actual), Scores)) + geom_boxplot() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("") + ylab("") + ggtitle(main))
saveFigure(main, "BoxPlot")
}
# plotBarPlot(actual, main="Class Labels")
# plotBarPlot(actualImbalanced, main="Class Labels")
# plotHist(randomScores, main="Random Scores")
## plotHist(fiveLevelScores, main = "Five Level Scores")
# plotHist(mediumSignalScores, main="Medium Signal Scores")
# plotHist(signalScores, main="Signal Scores")
# plotHist(oppositeScores, main="Opposite Scores")
# plotHist(strongSignalDiscreteScores, main="Strong Signal Discrete Scores")
# plotHist(oppositeBinaryScores, main="Opposite Binary Scores")
# plotHist(aFewGoodScores, main="A Few Good Scores")
#
# plotBoxPlot(randomScores, actual, main="Random Scores")
# plotBoxPlot(mediumSignalScores, actual, main="Medium Signal Scores")
# plotBoxPlot(signalScores, actual, main="Signal Scores")
# plotBoxPlot(oppositeScores, actual, main="Opposite Scores")
# plotBoxPlot(strongSignalDiscreteScores, actual, main="Strong Signal Discrete Scores")
# plotBoxPlot(oppositeBinaryScores, actual, main="Opposite Binary Scores")
# plotBoxPlot(aFewGoodScores, actual, main="A Few Good Scores")
# Chunk 4
# plotHist(mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
# plotHist(signalScoresImbalanced, main="Signal Scores Imbalanced")
# plotHist(oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
# plotHist(strongSignalDiscreteScoresImbalanced, main="Strong Signal Discrete Scores Imbalanced")
# plotHist(oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
#
# plotBoxPlot(mediumSignalScoresImbalanced, actualImbalanced, main="Medium Signal Scores Imbalanced")
# plotBoxPlot(signalScoresImbalanced, actualImbalanced, main="Signal Scores Imbalanced")
# plotBoxPlot(oppositeScoresImbalanced, actualImbalanced, main="Opposite Scores Imbalanced")
# plotBoxPlot(strongSignalDiscreteScoresImbalanced, actualImbalanced, main="Strong Signal Discrete Scores Imbalanced")
# plotBoxPlot(oppositeBinaryScoresImbalanced, actualImbalanced, main="Opposite Binary Scores Imbalanced")
# Chunk 5
plotROC = function(actual, scores, main)
{
rocResult = roc(scores, actual)
aucValue = auc(rocResult)
main2 = paste(main, "\n", "(AUC = ", format(aucValue, digits=3, nsmall=3), ")", sep="")
plotData <- data.frame(TPR=rocResult$tpr, FPR=rocResult$fpr)
print(ggplot(plotData, aes(x=FPR, y=TPR)) + geom_abline(color="darkgrey", linetype="dashed") + geom_line() + theme_bw() + theme(legend.key = element_blank(), legend.title=element_blank()) + xlab("False positive rate") + ylab("True positive rate") + ggtitle(main2))
saveFigure(main, "ROC")
}
#
# plotROC(actual, randomScores, "Random Scores")
# plotROC(actual, mediumSignalScores, main="Medium Signal Scores")
# plotROC(actual, round(mediumSignalScores), main="Medium Signal Scores")
# plotROC(actual, signalScores, main="Signal Scores")
# plotROC(actual, oppositeScores, main="Opposite Scores")
# plotROC(actual, aFewGoodScores, main="A Few Good Scores")
#
# plotROC(actual, strongSignalDiscreteScores, main="Strong Signal Discrete Scores")
# plotROC(actual, singleValueScores, main="Single Value Scores")
# plotROC(actual, oppositeBinaryScores, main="Opposite Binary Scores")
#
# plotROC(actualImbalanced, randomScores, main="Random Scores Imbalanced")
# plotROC(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
# plotROC(actualImbalanced, signalScoresImbalanced, main="Signal Scores Imbalanced")
# plotROC(actualImbalanced, oppositeScoresImbalanced, main="Opposite Scores Imbalanced")
# plotROC(actualImbalanced, strongSignalDiscreteScoresImbalanced, main="Strong Signal Discrete Scores Imbalanced")
# plotROC(actualImbalanced, oppositeBinaryScoresImbalanced, main="Opposite Binary Scores Imbalanced")
pare(actual, mediumSignalScores, main="Medium Signal Scores")
pare(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
plotROC(actual, mediumSignalScores, main="Medium Signal Scores")
plotROC(actualImbalanced, mediumSignalScoresImbalanced, main="Medium Signal Scores Imbalanced")
